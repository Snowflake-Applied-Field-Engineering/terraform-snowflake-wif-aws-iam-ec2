#!/usr/bin/env python3
import os, sys
import snowflake.connector as sf

def getenv(k, default=None, required=False):
    v = os.getenv(k, default)
    if required and not v:
        print(f"Missing required env var: {k}", file=sys.stderr)
        sys.exit(2)
    return v

account = getenv("SNOWFLAKE_ACCOUNT")
user    = getenv("SNOWFLAKE_USER")
role    = getenv("SNOWFLAKE_ROLE", "")
wh      = getenv("SNOWFLAKE_WAREHOUSE", "")
db      = getenv("SNOWFLAKE_DATABASE", "")
schema  = getenv("SNOWFLAKE_SCHEMA", "")

# Default comes from /etc/profile.d/snowflake-test.sh
authent = getenv("SNOWFLAKE_AUTHENTICATOR", getenv("SNOWFLAKE_DEFAULT_AUTHENTICATOR", "oauth"))

conn_args = {"account": account, "user": user, "authenticator": authent}

if authent.lower() == "oauth":
    token = getenv("SNOWFLAKE_OAUTH_TOKEN", required=True)
    conn_args["token"] = token
elif authent.lower() in ("externalbrowser", "snowflake"):
    # externalbrowser: device flow; "snowflake": native auth (password if set)
    password = getenv("SNOWFLAKE_PASSWORD")
    if password:
        conn_args["password"] = password
else:
    # Fallback to password for other authenticators if provided
    password = getenv("SNOWFLAKE_PASSWORD", required=True)
    conn_args["password"] = password

if role:
    conn_args["role"] = role
if wh:
    conn_args["warehouse"] = wh
if db:
    conn_args["database"] = db
if schema:
    conn_args["schema"] = schema

print("snowflake-connector-python version:", sf.__version__)

with sf.connect(**conn_args) as conn:
    with conn.cursor() as cur:
        cur.execute("select current_user(), current_account(), current_version()")
        print(cur.fetchone())