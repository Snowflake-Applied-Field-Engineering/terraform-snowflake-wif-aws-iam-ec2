name: Terraform Validation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan (Dry Run)
      id: plan
      run: |
        # Create a minimal tfvars file for validation
        cat > terraform.tfvars <<EOF
        region                     = "us-east-1"
        vpc_id                     = "vpc-12345678"
        subnet_id                  = "subnet-12345678"
        snowflake_organization_name = "test-org"
        snowflake_account_name     = "test-account"
        snowflake_username         = "test-user"
        snowflake_role             = "ACCOUNTADMIN"
        snowflake_private_key_path = "/tmp/dummy-key.pem"
        snowflake_private_key_passphrase = "dummy"
        wif_test_database          = "TEST_DB"
        EOF
        
        # Create a dummy key file
        ssh-keygen -t rsa -b 2048 -m PEM -f /tmp/dummy-key.pem -N "dummy" -q
        
        # Run plan (will fail on provider auth, but validates syntax)
        terraform plan -input=false || true
      continue-on-error: true

    - name: Summary
      run: |
        echo "## Terraform Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Format Check:** ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Init:** ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Validate:** ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.fmt.outcome }}" != "success" ]; then
          echo "⚠️ Format check failed. Run 'terraform fmt -recursive' to fix." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        if [ "${{ steps.init.outcome }}" != "success" ] || [ "${{ steps.validate.outcome }}" != "success" ]; then
          echo "❌ Validation failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        echo "✅ All validation checks passed!" >> $GITHUB_STEP_SUMMARY

